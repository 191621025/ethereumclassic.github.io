{"componentChunkName":"component---src-routes-ecosystem-js","path":"/ecosystem/","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"locale":"en","localeMetadata":{"locale":"en_US","lang":"en","title":"Ethereum Classic","description":"A decentralized platform that runs smart contracts: applications that run exactly as programmed without downtime, censorship or third party interference"},"i18n":{"json":{"projects":{"multiGeth":"Multi-Geth / Classic Geth","multiGethText":"ETC Labs Core is maintaining a multi-geth patch that enables geth to support multiple networks. Eventually they hope to have multi-geth integrated into mainline geth.","multiGethDifficulty":"Difficulty Bomb Removal","multiGethAdvanced":"Advanced Logging for Developers (Machine Readable Logging & ELK Config)","multiGethImproved":"Improved Caching for Faster Performance (StateDB)","multiGethCompatibility":"Compatibility with New Ethereum Opcodes","multiGethAddress":"Address / Transaction Indexing for Developers","multiGethFaster":"Faster Syncing (New Warp Sync)"}},"mdx":{"intro":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Ecosystem\"), mdx(\"p\", null, \"This page contains a list of community-sourced projects that are working for, with or on top of Ethereum Classic.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}}}}